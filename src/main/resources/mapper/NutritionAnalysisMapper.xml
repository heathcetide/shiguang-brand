<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.foodrecord.mapper.NutritionAnalysisMapper">

    <!-- 定义基础 ResultMap -->
    <resultMap id="BaseResultMap" type="com.foodrecord.model.entity.NutritionAnalysis">
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="analysis_date" property="analysisDate"/>
        <result column="protein_balance" property="proteinBalance"/>
        <result column="fat_balance" property="fatBalance"/>
        <result column="carb_balance" property="carbBalance"/>
        <result column="vitamin_balance" property="vitaminBalance"/>
        <result column="mineral_balance" property="mineralBalance"/>
        <result column="overall_balance" property="overallBalance"/>
        <result column="nutrition_suggestions" property="nutritionSuggestions"/>
        <result column="health_warnings" property="healthWarnings"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        <result column="deleted" property="deleted"/>
        <association property="user" column="user_id"
                     select="com.foodrecord.mapper.UserMapper.selectById"/>
    </resultMap>

    <!-- 定义基础列 -->
    <sql id="Base_Column_List">
        id, user_id, analysis_date, protein_balance, fat_balance, carb_balance,
        vitamin_balance, mineral_balance, overall_balance, nutrition_suggestions,
        health_warnings, created_at, updated_at, deleted
    </sql>

    <!-- 根据用户ID和日期查询 -->
    <select id="selectByUserIdAndDate" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM nutrition_analysis
        WHERE user_id = #{userId}
        AND analysis_date = #{analysisDate}
        AND deleted = 0
    </select>

    <!-- 根据用户ID和日期范围查询 -->
    <select id="selectByUserIdAndDateRange" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM nutrition_analysis
        WHERE user_id = #{userId}
        AND analysis_date BETWEEN #{startDate} AND #{endDate}
        AND deleted = 0
        ORDER BY analysis_date DESC
    </select>

    <!-- 查询总体均衡度最高的用户 -->
    <select id="selectTopBalancedUsers" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM nutrition_analysis
        WHERE analysis_date BETWEEN #{startDate} AND #{endDate}
        AND deleted = 0
        ORDER BY overall_balance DESC
        LIMIT #{limit}
    </select>

    <!-- 计算营养均衡度 -->
    <update id="calculateNutritionBalance">
        INSERT INTO nutrition_analysis (
        user_id, analysis_date, protein_balance, fat_balance, carb_balance,
        vitamin_balance, mineral_balance, overall_balance, nutrition_suggestions,
        health_warnings, created_at, updated_at
        )
        SELECT
        #{userId} AS user_id,
        #{analysisDate} AS analysis_date,
        /* 计算蛋白质均衡度 */
        CASE
        WHEN udg.protein_target &gt; 0 THEN
        (SUM(n.protein * udr.portion_size) / udg.protein_target) * 100
        ELSE 0
        END AS protein_balance,
        /* 计算脂肪均衡度 */
        CASE
        WHEN udg.fat_target &gt; 0 THEN
        (SUM(n.fat * udr.portion_size) / udg.fat_target) * 100
        ELSE 0
        END AS fat_balance,
        /* 计算碳水均衡度 */
        CASE
        WHEN udg.carb_target &gt; 0 THEN
        (SUM(n.carbohydrate * udr.portion_size) / udg.carb_target) * 100
        ELSE 0
        END AS carb_balance,
        /* 计算维生素均衡度 */
        (
        COALESCE(AVG(v.vitamin_a / 800 * 100), 0) +
        COALESCE(AVG(v.vitamin_c / 100 * 100), 0) +
        COALESCE(AVG(v.vitamin_d / 5 * 100), 0) +
        COALESCE(AVG(v.vitamin_e / 14 * 100), 0)
        ) / 4 AS vitamin_balance,
        /* 计算矿物质均衡度 */
        (
        COALESCE(AVG(m.calcium / 800 * 100), 0) +
        COALESCE(AVG(m.iron / 14 * 100), 0) +
        COALESCE(AVG(m.zinc / 11 * 100), 0)
        ) / 3 AS mineral_balance,
        /* 总体均衡度 */
        (
        CASE
        WHEN udg.protein_target &gt; 0 THEN
        (SUM(n.protein * udr.portion_size) / udg.protein_target) * 100
        ELSE 0
        END +
        CASE
        WHEN udg.fat_target &gt; 0 THEN
        (SUM(n.fat * udr.portion_size) / udg.fat_target) * 100
        ELSE 0
        END +
        CASE
        WHEN udg.carb_target &gt; 0 THEN
        (SUM(n.carbohydrate * udr.portion_size) / udg.carb_target) * 100
        ELSE 0
        END
        ) / 3 AS overall_balance,
        /* 生成营养建议 */
        CASE
        WHEN (SUM(n.protein * udr.portion_size) / udg.protein_target) &lt; 0.8 THEN
        '建议增加蛋白质摄入'
        WHEN (SUM(n.fat * udr.portion_size) / udg.fat_target) &gt; 1.2 THEN
        '建议减少脂肪摄入'
        ELSE
        '营养摄入良好'
        END AS nutrition_suggestions,
        /* 生成健康警告 */
        CASE
        WHEN (SUM(n.fat * udr.portion_size) / udg.fat_target) &gt; 1.5 THEN
        '脂肪摄入过高，请注意控制'
        WHEN (SUM(n.carbohydrate * udr.portion_size) / udg.carb_target) &gt; 1.5 THEN
        '碳水摄入过高，请注意控制'
        ELSE
        NULL
        END AS health_warnings,
        NOW() AS created_at,
        NOW() AS updated_at
        FROM user_diet_records udr
        JOIN nutrition n ON udr.food_id = n.food_id
        LEFT JOIN vitamins v ON udr.food_id = v.food_id
        LEFT JOIN minerals m ON udr.food_id = m.food_id
        LEFT JOIN user_dietary_goals udg ON udr.user_id = udg.user_id
        WHERE udr.user_id = #{userId}
        AND DATE(udr.meal_time) = #{analysisDate}
        AND udr.deleted = 0
        GROUP BY udr.user_id
        ON DUPLICATE KEY UPDATE
        protein_balance = VALUES(protein_balance),
        fat_balance = VALUES(fat_balance),
        carb_balance = VALUES(carb_balance),
        vitamin_balance = VALUES(vitamin_balance),
        mineral_balance = VALUES(mineral_balance),
        overall_balance = VALUES(overall_balance),
        nutrition_suggestions = VALUES(nutrition_suggestions),
        health_warnings = VALUES(health_warnings),
        updated_at = NOW()
    </update>
</mapper>
