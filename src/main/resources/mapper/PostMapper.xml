<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.foodrecord.mapper.PostMapper">

    <!-- 获取用户收藏的帖子 -->
    <select id="selectFavoritePostsByUserId" resultType="com.foodrecord.model.entity.Post">
        SELECT p.*
        FROM post p
        INNER JOIN post_favorites pf ON p.id = pf.post_id
        WHERE pf.user_id = #{userId}
        AND pf.is_delete = 0
        AND p.is_delete = 0
        ORDER BY pf.created_at DESC
    </select>

    <!-- 获取用户获赞总数 -->
    <select id="sumLikesByUserId" resultType="long">
        SELECT COALESCE(SUM(like_count), 0)
        FROM post
        WHERE user_id = #{userId}
        AND is_delete = 0
    </select>

    <!-- 获取用户帖子被收藏总数 -->
    <select id="sumFavoritesByUserId" resultType="long">
        SELECT COUNT(*)
        FROM post_favorites pf
        INNER JOIN post p ON p.id = pf.post_id
        WHERE p.user_id = #{userId}
        AND pf.is_delete = 0
        AND p.is_delete = 0
    </select>

    <!-- 获取用户在指定日期范围内的每日发帖数量 -->
    <select id="countPostsByDateRange" resultType="map">
        SELECT 
            DATE(created_at) as date,
            COUNT(*) as count
        FROM post
        WHERE user_id = #{userId}
        AND created_at BETWEEN #{startDate} AND #{endDate}
        AND is_delete = 0
        GROUP BY DATE(created_at)
        ORDER BY date ASC
    </select>

    <!-- 统计活跃帖子数量 -->
    <select id="countActivePosts" resultType="long">
        SELECT COUNT(*)
        FROM post
        WHERE is_delete = 0
    </select>

    <!-- 统计今日新增帖子数 -->
    <select id="countTodayPosts" resultType="long">
        SELECT COUNT(*)
        FROM post
        WHERE is_delete = 0
        AND DATE(created_at) = CURDATE()
    </select>

    <!-- 统计待审核帖子数 -->
    <select id="countPendingAuditPosts" resultType="long">
        SELECT COUNT(*)
        FROM post
        WHERE is_delete = 0
        AND status = 'PENDING'
    </select>

    <!-- 统计被举报帖子数 -->
    <select id="countReportedPosts" resultType="long">
        SELECT COUNT(DISTINCT p.id)
        FROM post p
        JOIN post_report pr ON p.id = pr.post_id
        WHERE p.is_delete = 0
        AND pr.status = 'PENDING'
    </select>

    <!-- 获取热门帖子 -->
    <select id="selectHotPosts" resultType="map">
        SELECT 
            p.id,
            p.content,
            p.user_id,
            p.like_count,
            p.comments_count,
            p.created_at
        FROM post p
        WHERE p.is_delete = 0
        ORDER BY (p.like_count + p.comments_count * 2) DESC
        LIMIT #{limit}
    </select>

    <!-- 获取每日帖子统计 -->
    <select id="selectDailyStatistics" resultType="map">
        SELECT 
            DATE(created_at) as date,
            COUNT(*) as total_posts,
            SUM(like_count) as total_likes,
            SUM(comments_count) as total_comments,
            COUNT(DISTINCT user_id) as unique_users
        FROM post
        WHERE is_delete = 0
        AND created_at >= #{startTime}
        GROUP BY DATE(created_at)
        ORDER BY date DESC
    </select>

    <!-- 获取用户发帖排行 -->
    <select id="selectUserPostRanking" resultType="map">
        SELECT 
            p.user_id,
            COUNT(*) as post_count,
            SUM(p.like_count) as total_likes,
            SUM(p.comments_count) as total_comments,
            MAX(p.created_at) as last_post_time
        FROM post p
        WHERE p.is_delete = 0
        GROUP BY p.user_id
        ORDER BY post_count DESC
        LIMIT #{limit}
    </select>

    <!-- 获取分类统计 -->
    <select id="selectCategoryStatistics" resultType="map">
        SELECT 
            category,
            COUNT(*) as post_count,
            SUM(like_count) as total_likes,
            SUM(comments_count) as total_comments,
            COUNT(DISTINCT user_id) as unique_users
        FROM post
        WHERE is_delete = 0
        GROUP BY category
    </select>

    <!-- 获取热门帖子分析 -->
    <select id="selectHotPostsAnalysis" resultType="map">
        SELECT 
            p.id,
            p.content,
            p.user_id,
            p.like_count,
            p.comments_count,
            p.created_at,
            p.tags,
            (p.like_count + p.comments_count * 2) as hot_score
        FROM post p
        WHERE p.is_delete = 0
        AND p.created_at >= #{startTime}
        ORDER BY hot_score DESC
        LIMIT #{limit}
    </select>

    <select id="getPosts" resultType="com.foodrecord.model.entity.Post">
        SELECT * FROM post
            WHERE deleted = 0
            <if test="keyword != null">
                AND content LIKE CONCAT('%', #{keyword}, '%')
            </if>
        ORDER BY created_at DESC
    </select>
</mapper> 