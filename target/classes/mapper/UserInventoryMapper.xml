<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.foodrecord.mapper.UserInventoryMapper">

    <!-- 查询所有未删除的库存 -->
    <select id="selectAllByUserId" resultType="com.foodrecord.model.entity.user.UserInventory">
        SELECT *
        FROM user_inventory
        WHERE user_id = #{userId} AND is_deleted = 0
    </select>

    <!-- 查询即将过期的库存 -->
    <select id="selectExpiringSoon" resultType="com.foodrecord.model.entity.user.UserInventory">
        SELECT *
        FROM user_inventory
        WHERE user_id = #{userId}
          AND expiration_date BETWEEN NOW() AND DATE_ADD(NOW(), INTERVAL #{days} DAY)
          AND is_deleted = 0
    </select>


    <!-- 查询低于阈值的库存 -->
    <select id="selectLowStock" resultType="com.foodrecord.model.entity.user.UserInventory">
        SELECT *
        FROM user_inventory
        WHERE user_id = #{userId}
          AND quantity <![CDATA[<]]> min_quantity
          AND is_deleted = 0
    </select>

    <select id="selectByCategory" resultType="com.foodrecord.model.entity.user.UserInventory">
        SELECT * FROM user_inventory 
        WHERE user_id = #{userId}
        <if test="category != null">
            AND category = #{category}
        </if>
        AND is_deleted = 0
    </select>

    <select id="selectByLocation" resultType="com.foodrecord.model.entity.user.UserInventory">
        SELECT * FROM user_inventory 
        WHERE user_id = #{userId}
        <if test="location != null">
            AND storage_location = #{location}
        </if>
        AND is_deleted = 0
    </select>

    <select id="selectStatistics" resultType="java.util.Map">
        SELECT 
            COUNT(*) as total_items,
            SUM(quantity) as total_quantity,
            COUNT(CASE WHEN expiration_date &lt;= DATE_ADD(NOW(), INTERVAL 7 DAY) THEN 1 END) as expiring_soon,
            COUNT(CASE WHEN quantity &lt;= min_quantity THEN 1 END) as low_stock
        FROM user_inventory
        WHERE user_id = #{userId}
        AND is_deleted = 0
    </select>

    <insert id="batchInsert">
        INSERT INTO user_inventory (
            user_id, food_id, custom_food_name, quantity, unit, 
            expiration_date, storage_location, category, min_quantity,
            created_at, updated_at
        ) VALUES 
        <foreach collection="list" item="item" separator=",">
            (
                #{item.userId}, #{item.foodId}, #{item.customFoodName}, 
                #{item.quantity}, #{item.unit}, #{item.expirationDate},
                #{item.storageLocation}, #{item.category}, #{item.minQuantity},
                NOW(), NOW()
            )
        </foreach>
    </insert>

    <update id="batchUpdate">
        <foreach collection="list" item="item" separator=";">
            UPDATE user_inventory
            SET 
                quantity = #{item.quantity},
                unit = #{item.unit},
                expiration_date = #{item.expirationDate},
                storage_location = #{item.storageLocation},
                category = #{item.category},
                min_quantity = #{item.minQuantity},
                updated_at = NOW()
            WHERE id = #{item.id}
            AND is_deleted = 0
        </foreach>
    </update>

    <select id="searchByKeyword" resultType="com.foodrecord.model.entity.user.UserInventory">
        SELECT * FROM user_inventory 
        WHERE user_id = #{userId}
        AND (
            custom_food_name LIKE CONCAT('%', #{keyword}, '%')
            OR category LIKE CONCAT('%', #{keyword}, '%')
            OR storage_location LIKE CONCAT('%', #{keyword}, '%')
        )
        AND is_deleted = 0
    </select>

    <select id="selectExpiringBetween" resultType="com.foodrecord.model.entity.user.UserInventory">
        SELECT * FROM user_inventory 
        WHERE user_id = #{userId}
        AND expiration_date BETWEEN #{startDate} AND #{endDate}
        AND is_deleted = 0
    </select>

    <select id="selectPurchasedBetween" resultType="com.foodrecord.model.entity.user.UserInventory">
        SELECT * FROM user_inventory 
        WHERE user_id = #{userId}
        AND created_at BETWEEN #{startDate} AND #{endDate}
        AND is_deleted = 0
    </select>

    <select id="selectBySource" resultType="com.foodrecord.model.entity.user.UserInventory">
        SELECT * FROM user_inventory 
        WHERE user_id = #{userId}
        <if test="source != null">
            AND source = #{source}
        </if>
        AND is_deleted = 0
    </select>

    <update id="updateQuantity">
        UPDATE user_inventory
        SET quantity = #{quantity},
            updated_at = NOW()
        WHERE id = #{id}
        AND is_deleted = 0
    </update>

    <update id="updateExpirationDate">
        UPDATE user_inventory
        SET expiration_date = #{expirationDate},
            updated_at = NOW()
        WHERE id = #{id}
        AND is_deleted = 0
    </update>

    <update id="updateStorageLocation">
        UPDATE user_inventory
        SET storage_location = #{location},
            updated_at = NOW()
        WHERE id = #{id}
        AND is_deleted = 0
    </update>

    <select id="selectInventoryAlerts" resultType="java.util.Map">
        SELECT 
            id,
            custom_food_name,
            quantity,
            unit,
            expiration_date,
            CASE 
                WHEN expiration_date &lt;= DATE_ADD(NOW(), INTERVAL 7 DAY) THEN 'EXPIRING_SOON'
                WHEN quantity &lt;= min_quantity THEN 'LOW_STOCK'
            END as alert_type
        FROM user_inventory
        WHERE user_id = #{userId}
        AND (
            expiration_date &lt;= DATE_ADD(NOW(), INTERVAL 7 DAY)
            OR quantity &lt;= min_quantity
        )
        AND is_deleted = 0
    </select>

    <select id="selectUsageHistory" resultType="java.util.Map">
        SELECT 
            ui.id,
            ui.custom_food_name,
            uh.quantity as used_quantity,
            uh.consumption_date,
            uh.notes
        FROM user_inventory ui
        JOIN user_inventory_history uh ON ui.id = uh.inventory_id
        WHERE ui.user_id = #{userId}
        AND uh.consumption_date BETWEEN #{startDate} AND #{endDate}
        AND ui.is_deleted = 0
    </select>

    <insert id="recordConsumption">
        INSERT INTO user_inventory_history (
            inventory_id, quantity, consumption_date, created_at
        ) VALUES (
            #{id}, #{quantity}, #{consumptionDate}, NOW()
        );
        
        UPDATE user_inventory
        SET quantity = quantity - #{quantity},
            updated_at = NOW()
        WHERE id = #{id}
        AND is_deleted = 0
    </insert>

    <select id="selectInventorySuggestions" resultType="java.util.Map">
        SELECT 
            id,
            custom_food_name,
            quantity,
            unit,
            expiration_date,
            'RESTOCK' as suggestion_type,
            CASE 
                WHEN quantity &lt;= min_quantity THEN '库存不足，建议补货'
                WHEN expiration_date &lt;= DATE_ADD(NOW(), INTERVAL 7 DAY) THEN '即将过期，建议尽快使用'
            END as suggestion
        FROM user_inventory
        WHERE user_id = #{userId}
        AND (
            quantity &lt;= min_quantity
            OR expiration_date &lt;= DATE_ADD(NOW(), INTERVAL 7 DAY)
        )
        AND is_deleted = 0
    </select>

    <select id="selectShoppingListSuggestions" resultType="java.util.Map">
        SELECT 
            id,
            custom_food_name,
            min_quantity - quantity as needed_quantity,
            unit,
            'SHOPPING' as suggestion_type
        FROM user_inventory
        WHERE user_id = #{userId}
        AND quantity &lt;= min_quantity
        AND is_deleted = 0
    </select>

    <select id="selectNutritionAnalysis" resultType="java.util.Map">
        SELECT 
            SUM(f.calories * ui.quantity) as total_calories,
            SUM(f.protein * ui.quantity) as total_protein,
            SUM(f.carbs * ui.quantity) as total_carbs,
            SUM(f.fat * ui.quantity) as total_fat
        FROM user_inventory ui
        LEFT JOIN food f ON ui.food_id = f.id
        WHERE ui.user_id = #{userId}
        AND ui.is_deleted = 0
    </select>

    <select id="selectCostAnalysis" resultType="java.util.Map">
        SELECT 
            COUNT(*) as total_items,
            SUM(purchase_price) as total_cost,
            AVG(purchase_price) as average_cost,
            SUM(CASE WHEN expiration_date &lt; NOW() THEN purchase_price ELSE 0 END) as waste_cost
        FROM user_inventory
        WHERE user_id = #{userId}
        AND created_at BETWEEN #{startDate} AND #{endDate}
        AND is_deleted = 0
    </select>

    <select id="selectWasteAnalysis" resultType="java.util.Map">
        SELECT 
            COUNT(*) as expired_items,
            SUM(quantity) as wasted_quantity,
            SUM(purchase_price) as waste_cost,
            COUNT(DISTINCT category) as affected_categories
        FROM user_inventory
        WHERE user_id = #{userId}
        AND expiration_date BETWEEN #{startDate} AND #{endDate}
        AND expiration_date &lt; NOW()
        AND is_deleted = 0
    </select>

    <select id="selectConsumptionPatterns" resultType="java.util.Map">
        SELECT 
            category,
            COUNT(*) as usage_count,
            AVG(DATEDIFF(last_used_date, created_at)) as avg_consumption_days
        FROM user_inventory
        WHERE user_id = #{userId}
        AND last_used_date IS NOT NULL
        AND is_deleted = 0
        GROUP BY category
    </select>

    <insert id="recordTransfer">
        INSERT INTO inventory_transfer_history (
            inventory_id, new_location, transfer_date, reason, created_at
        ) VALUES (
            #{id}, #{newLocation}, #{transferDate}, #{reason}, NOW()
        );
        
        UPDATE user_inventory
        SET storage_location = #{newLocation},
            updated_at = NOW()
        WHERE id = #{id}
        AND is_deleted = 0
    </insert>

    <insert id="splitInventory">
        INSERT INTO user_inventory (
            user_id, food_id, custom_food_name, quantity, unit,
            expiration_date, storage_location, category, min_quantity,
            source, created_at, updated_at
        )
        SELECT 
            user_id, food_id, custom_food_name, #{splitQuantity}, unit,
            expiration_date, #{newLocation}, category, min_quantity,
            source, NOW(), NOW()
        FROM user_inventory
        WHERE id = #{id}
        AND is_deleted = 0;
        
        UPDATE user_inventory
        SET quantity = quantity - #{splitQuantity},
            updated_at = NOW()
        WHERE id = #{id}
        AND is_deleted = 0
    </insert>

    <update id="mergeInventory">
        UPDATE user_inventory ui1
        JOIN user_inventory ui2 ON ui2.id = #{mergeId}
        SET ui1.quantity = ui1.quantity + ui2.quantity,
            ui1.updated_at = NOW()
        WHERE ui1.id = #{id}
        AND ui1.is_deleted = 0
        AND ui2.is_deleted = 0;
        
        UPDATE user_inventory
        SET is_deleted = 1,
            updated_at = NOW()
        WHERE id = #{mergeId}
    </update>

    <insert id="recordQualityCheck">
        INSERT INTO inventory_quality_check (
            inventory_id, check_result, check_date, notes, created_at
        ) VALUES (
            #{id}, #{checkResult}, #{checkDate}, #{notes}, NOW()
        )
    </insert>

    <select id="selectStorageOptimization" resultType="java.util.Map">
        SELECT 
            storage_location,
            COUNT(*) as item_count,
            SUM(quantity) as total_quantity,
            COUNT(CASE WHEN expiration_date &lt;= DATE_ADD(NOW(), INTERVAL 7 DAY) THEN 1 END) as expiring_soon_count
        FROM user_inventory
        WHERE user_id = #{userId}
        AND is_deleted = 0
        GROUP BY storage_location
    </select>

    <select id="selectExpirationForecast" resultType="java.util.Map">
        SELECT 
            DATE(expiration_date) as expiry_date,
            COUNT(*) as expiring_items,
            GROUP_CONCAT(custom_food_name) as items
        FROM user_inventory
        WHERE user_id = #{userId}
        AND expiration_date BETWEEN NOW() AND DATE_ADD(NOW(), INTERVAL #{days} DAY)
        AND is_deleted = 0
        GROUP BY DATE(expiration_date)
        ORDER BY expiration_date
    </select>

    <select id="selectSeasonalAnalysis" resultType="java.util.Map">
        SELECT 
            MONTH(created_at) as month,
            category,
            COUNT(*) as purchase_count,
            SUM(quantity) as total_quantity
        FROM user_inventory
        WHERE user_id = #{userId}
        AND created_at >= DATE_SUB(NOW(), INTERVAL 1 YEAR)
        AND is_deleted = 0
        GROUP BY MONTH(created_at), category
    </select>

    <insert id="shareInventory">
        INSERT INTO inventory_share_history (
            inventory_id, source_user_id, target_user_id, 
            share_quantity, notes, created_at
        ) VALUES (
            #{id}, 
            (SELECT user_id FROM user_inventory WHERE id = #{id}),
            #{targetUserId}, #{shareQuantity}, #{notes}, NOW()
        );
        
        UPDATE user_inventory
        SET quantity = quantity - #{shareQuantity},
            updated_at = NOW()
        WHERE id = #{id}
        AND is_deleted = 0;
        
        INSERT INTO user_inventory (
            user_id, food_id, custom_food_name, quantity, unit,
            expiration_date, storage_location, category, min_quantity,
            source, created_at, updated_at
        )
        SELECT 
            #{targetUserId}, food_id, custom_food_name, #{shareQuantity}, unit,
            expiration_date, storage_location, category, min_quantity,
            'SHARED', NOW(), NOW()
        FROM user_inventory
        WHERE id = #{id}
        AND is_deleted = 0
    </insert>

    <select id="selectInventoryBasedRecipes" resultType="java.util.Map">
        SELECT 
            r.id as recipe_id,
            r.name as recipe_name,
            r.type as recipe_type,
            r.difficulty_level,
            COUNT(DISTINCT CASE WHEN ui.quantity >= ri.required_quantity THEN ri.ingredient_id END) as available_ingredients,
            COUNT(DISTINCT ri.ingredient_id) as total_ingredients
        FROM recipe r
        JOIN recipe_ingredient ri ON r.id = ri.recipe_id
        LEFT JOIN user_inventory ui ON ri.ingredient_id = ui.food_id 
            AND ui.user_id = #{userId}
            AND ui.is_deleted = 0
        WHERE (#{recipeType} IS NULL OR r.type = #{recipeType})
        AND (#{difficultyLevel} IS NULL OR r.difficulty_level = #{difficultyLevel})
        GROUP BY r.id, r.name, r.type, r.difficulty_level
        HAVING available_ingredients >= (total_ingredients * 0.7)
    </select>

    <select id="selectMealPlan" resultType="java.util.Map">
        WITH available_recipes AS (
            SELECT 
                r.id as recipe_id,
                r.name as recipe_name,
                r.type as recipe_type,
                COUNT(DISTINCT CASE WHEN ui.quantity >= ri.required_quantity THEN ri.ingredient_id END) as available_ingredients,
                COUNT(DISTINCT ri.ingredient_id) as total_ingredients
            FROM recipe r
            JOIN recipe_ingredient ri ON r.id = ri.recipe_id
            LEFT JOIN user_inventory ui ON ri.ingredient_id = ui.food_id 
                AND ui.user_id = #{userId}
                AND ui.is_deleted = 0
            GROUP BY r.id, r.name, r.type
            HAVING available_ingredients >= (total_ingredients * 0.7)
        )
        SELECT 
            ADDDATE(CURDATE(), t.n) as meal_date,
            JSON_ARRAYAGG(
                JSON_OBJECT(
                    'recipe_id', ar.recipe_id,
                    'recipe_name', ar.recipe_name,
                    'recipe_type', ar.recipe_type,
                    'meal_type', CASE 
                        WHEN MOD(t.n, 3) = 0 THEN 'breakfast'
                        WHEN MOD(t.n, 3) = 1 THEN 'lunch'
                        ELSE 'dinner'
                    END
                )
            ) as meals
        FROM (
            SELECT n FROM (
                SELECT 0 as n UNION SELECT 1 UNION SELECT 2 UNION SELECT 3
                UNION SELECT 4 UNION SELECT 5 UNION SELECT 6
            ) numbers LIMIT #{days}
        ) t
        CROSS JOIN available_recipes ar
        GROUP BY t.n
    </select>

    <insert id="addInventoryLabel">
        INSERT INTO inventory_label (
            inventory_id, label, label_type, created_at
        ) VALUES (
            #{id}, #{label}, #{labelType}, NOW()
        )
    </insert>

    <delete id="removeInventoryLabel">
        DELETE FROM inventory_label
        WHERE inventory_id = #{id}
        AND label = #{label}
    </delete>

    <select id="selectInventoryLabels" resultType="java.util.Map">
        SELECT 
            il.label,
            il.label_type,
            COUNT(*) as usage_count
        FROM inventory_label il
        JOIN user_inventory ui ON il.inventory_id = ui.id
        WHERE ui.user_id = #{userId}
        AND ui.is_deleted = 0
        GROUP BY il.label, il.label_type
    </select>

    <insert id="addInventoryNote">
        INSERT INTO inventory_note (
            inventory_id, content, note_type, created_at
        ) VALUES (
            #{id}, #{content}, #{noteType}, NOW()
        )
    </insert>

    <select id="selectInventoryNotes" resultType="java.util.Map">
        SELECT 
            content,
            note_type,
            created_at
        FROM inventory_note
        WHERE inventory_id = #{id}
        ORDER BY created_at DESC
    </select>

    <select id="selectInventoryReports" resultType="java.util.Map">
        SELECT 
            CASE 
                WHEN #{reportType} = 'EXPIRATION' THEN
                    JSON_OBJECT(
                        'expired_count', COUNT(CASE WHEN expiration_date &lt; NOW() THEN 1 END),
                        'expiring_soon_count', COUNT(CASE WHEN expiration_date BETWEEN NOW() AND DATE_ADD(NOW(), INTERVAL 7 DAY) THEN 1 END),
                        'total_waste_cost', SUM(CASE WHEN expiration_date &lt; NOW() THEN purchase_price ELSE 0 END)
                    )
                WHEN #{reportType} = 'USAGE' THEN
                    JSON_OBJECT(
                        'total_consumed', COUNT(DISTINCT CASE WHEN last_used_date BETWEEN #{startDate} AND #{endDate} THEN id END),
                        'avg_consumption_days', AVG(DATEDIFF(last_used_date, created_at)),
                        'most_used_category', (
                            SELECT category 
                            FROM user_inventory 
                            WHERE user_id = #{userId} 
                            AND last_used_date BETWEEN #{startDate} AND #{endDate}
                            GROUP BY category 
                            ORDER BY COUNT(*) DESC 
                            LIMIT 1
                        )
                    )
                WHEN #{reportType} = 'COST' THEN
                    JSON_OBJECT(
                        'total_cost', SUM(purchase_price),
                        'avg_cost_per_item', AVG(purchase_price),
                        'highest_cost_category', (
                            SELECT category 
                            FROM user_inventory 
                            WHERE user_id = #{userId} 
                            AND created_at BETWEEN #{startDate} AND #{endDate}
                            GROUP BY category 
                            ORDER BY SUM(purchase_price) DESC 
                            LIMIT 1
                        )
                    )
            END as report_data
        FROM user_inventory
        WHERE user_id = #{userId}
        AND created_at BETWEEN #{startDate} AND #{endDate}
        AND is_deleted = 0
    </select>

</mapper>
