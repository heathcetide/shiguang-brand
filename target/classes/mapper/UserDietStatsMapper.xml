<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.foodrecord.mapper.UserDietStatsMapper">
    
    <resultMap id="BaseResultMap" type="com.foodrecord.model.entity.user.UserDietStats">
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="stats_date" property="statsDate"/>
        <result column="total_calory" property="totalCalory"/>
        <result column="total_protein" property="totalProtein"/>
        <result column="total_fat" property="totalFat"/>
        <result column="total_carbohydrate" property="totalCarbohydrate"/>
        <result column="total_fiber" property="totalFiber"/>
        <result column="breakfast_calory" property="breakfastCalory"/>
        <result column="lunch_calory" property="lunchCalory"/>
        <result column="dinner_calory" property="dinnerCalory"/>
        <result column="snack_calory" property="snackCalory"/>
        <result column="goal_achievement_rate" property="goalAchievementRate"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        <result column="deleted" property="deleted"/>
        <association property="user" column="user_id" 
                     select="com.foodrecord.mapper.UserMapper.selectById"/>
    </resultMap>

    <sql id="Base_Column_List">
        id, user_id, stats_date, total_calory, total_protein, total_fat,
        total_carbohydrate, total_fiber, breakfast_calory, lunch_calory,
        dinner_calory, snack_calory, goal_achievement_rate,
        created_at, updated_at, deleted
    </sql>

    <select id="selectByUserIdAndDate" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List"/>
        FROM user_diet_stats
        WHERE user_id = #{userId} 
        AND stats_date = #{statsDate}
        AND deleted = 0
    </select>

    <select id="selectByUserIdAndDateRange" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List"/>
        FROM user_diet_stats
        WHERE user_id = #{userId} 
        AND stats_date BETWEEN #{startDate} AND #{endDate}
        AND deleted = 0
        ORDER BY stats_date DESC
    </select>

    <select id="selectTopAchievers" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List"/>
        FROM user_diet_stats
        WHERE stats_date BETWEEN #{startDate} AND #{endDate}
        AND deleted = 0
        ORDER BY goal_achievement_rate DESC
        LIMIT #{limit}
    </select>

    <update id="calculateDailyStats">
        INSERT INTO user_diet_stats (
            user_id, stats_date, total_calory, total_protein, total_fat,
            total_carbohydrate, total_fiber, breakfast_calory, lunch_calory,
            dinner_calory, snack_calory, goal_achievement_rate, created_at, updated_at
        )
        SELECT 
            #{userId},
            #{statsDate},
            SUM(n.calory * udr.portion_size) as total_calory,
            SUM(n.protein * udr.portion_size) as total_protein,
            SUM(n.fat * udr.portion_size) as total_fat,
            SUM(n.carbohydrate * udr.portion_size) as total_carbohydrate,
            SUM(n.fiber_dietary * udr.portion_size) as total_fiber,
            SUM(CASE WHEN udr.meal_type = '早餐' THEN n.calory * udr.portion_size ELSE 0 END) as breakfast_calory,
            SUM(CASE WHEN udr.meal_type = '午餐' THEN n.calory * udr.portion_size ELSE 0 END) as lunch_calory,
            SUM(CASE WHEN udr.meal_type = '晚餐' THEN n.calory * udr.portion_size ELSE 0 END) as dinner_calory,
            SUM(CASE WHEN udr.meal_type = '加餐' THEN n.calory * udr.portion_size ELSE 0 END) as snack_calory,
            CASE 
                WHEN udg.daily_calorie_target > 0 
                THEN (SUM(n.calory * udr.portion_size) / udg.daily_calorie_target) * 100
                ELSE 0 
            END as goal_achievement_rate,
            NOW(),
            NOW()
        FROM user_diet_records udr
        JOIN nutrition n ON udr.food_id = n.food_id
        LEFT JOIN user_health_data uhd ON udr.user_id = uhd.user_id
        WHERE udr.user_id = #{userId}
        AND DATE(udr.meal_time) = #{statsDate}
        AND udr.deleted = 0
        GROUP BY udr.user_id
        ON DUPLICATE KEY UPDATE
            total_calory = VALUES(total_calory),
            total_protein = VALUES(total_protein),
            total_fat = VALUES(total_fat),
            total_carbohydrate = VALUES(total_carbohydrate),
            total_fiber = VALUES(total_fiber),
            breakfast_calory = VALUES(breakfast_calory),
            lunch_calory = VALUES(lunch_calory),
            dinner_calory = VALUES(dinner_calory),
            snack_calory = VALUES(snack_calory),
            goal_achievement_rate = VALUES(goal_achievement_rate),
            updated_at = NOW()
    </update>
</mapper> 