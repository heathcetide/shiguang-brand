<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.foodrecord.mapper.TopicsMapper">

    <resultMap id="BaseResultMap" type="com.foodrecord.model.entity.Topics">
            <id property="id" column="id" jdbcType="BIGINT"/>
            <result property="name" column="name" jdbcType="VARCHAR"/>
            <result property="popularity" column="popularity" jdbcType="INTEGER"/>
            <result property="createdAt" column="created_at" jdbcType="TIMESTAMP"/>
            <result property="isDelete" column="is_delete" jdbcType="TINYINT"/>
    </resultMap>

    <select id="selectPage" resultType="com.foodrecord.model.entity.Topics">
        SELECT * FROM topics
        <where>
            <if test="ew != null and ew.sqlSegment != null">
                ${ew.sqlSegment} <!-- 动态拼接查询条件 -->
            </if>
        </where>
        ORDER BY popularity DESC
    </select>
    <select id="selectList" resultType="com.foodrecord.model.entity.Topics">
        SELECT * FROM topics
    </select>

    <sql id="Base_Column_List">
        id,name,popularity,
        created_at
    </sql>

    <!-- 获取话题趋势分析 -->
    <select id="selectTopicTrends" resultType="java.util.Map">
        SELECT 
            DATE(created_at) as date,
            COUNT(*) as total_posts,
            SUM(popularity) as total_popularity,
            COUNT(DISTINCT user_id) as unique_users
        FROM topics
        WHERE created_at >= #{startTime}
        GROUP BY DATE(created_at)
        ORDER BY date DESC
    </select>

    <!-- 获取话题参与度分析 -->
    <select id="selectTopicEngagement" resultType="java.util.Map">
        SELECT 
            t.id,
            COUNT(DISTINCT p.user_id) as unique_users,
            COUNT(p.id) as total_posts,
            AVG(p.likes_count) as avg_likes,
            AVG(p.comments_count) as avg_comments,
            MAX(p.created_at) as last_activity
        FROM topics t
        LEFT JOIN post p ON p.topic_id = t.id
        WHERE t.id = #{topicId}
        GROUP BY t.id
    </select>

    <!-- 获取相关话题 -->
    <select id="selectRelatedTopics" resultType="com.foodrecord.model.entity.Topics">
        SELECT t2.*
        FROM topics t1
        JOIN topics t2 ON t1.id != t2.id
        WHERE t1.id = #{topicId}
        AND EXISTS (
            SELECT 1 
            FROM post p1 
            JOIN post p2 ON p1.user_id = p2.user_id
            WHERE p1.topic_id = t1.id 
            AND p2.topic_id = t2.id
        )
        ORDER BY t2.popularity DESC
        LIMIT #{limit}
    </select>

    <!-- 获取用户话题偏好 -->
    <select id="selectUserTopicPreferences" resultType="java.util.Map">
        SELECT 
            t.id,
            t.name,
            COUNT(p.id) as post_count,
            AVG(p.likes_count) as avg_likes,
            MAX(p.created_at) as last_post_time
        FROM topics t
        JOIN post p ON p.topic_id = t.id
        WHERE p.user_id = #{userId}
        GROUP BY t.id, t.name
        ORDER BY post_count DESC
    </select>

    <!-- 获取话题活跃时段分析 -->
    <select id="selectTopicActiveTimeAnalysis" resultType="java.util.Map">
        SELECT 
            HOUR(created_at) as hour,
            COUNT(*) as post_count,
            AVG(likes_count) as avg_likes,
            AVG(comments_count) as avg_comments
        FROM post
        WHERE topic_id = #{topicId}
        GROUP BY HOUR(created_at)
        ORDER BY hour
    </select>

    <!-- 获取话题质量评分 -->
    <select id="selectTopicQualityScore" resultType="java.util.Map">
        SELECT 
            AVG(likes_count) as avg_likes,
            AVG(comments_count) as avg_comments,
            COUNT(DISTINCT user_id) as unique_users,
            AVG(LENGTH(content)) as avg_content_length,
            COUNT(CASE WHEN media_url IS NOT NULL THEN 1 END) as media_count
        FROM post
        WHERE topic_id = #{topicId}
    </select>

    <!-- 获取话题影响力分析 -->
    <select id="selectTopicInfluenceAnalysis" resultType="java.util.Map">
        SELECT 
            COUNT(DISTINCT p.user_id) as total_users,
            SUM(p.likes_count) as total_likes,
            SUM(p.comments_count) as total_comments,
            MAX(p.created_at) - MIN(p.created_at) as duration,
            COUNT(*) / (DATEDIFF(MAX(p.created_at), MIN(p.created_at)) + 1) as posts_per_day
        FROM post p
        WHERE p.topic_id = #{topicId}
    </select>

    <!-- 获取话题互动统计 -->
    <select id="selectTopicInteractionStats" resultType="java.util.Map">
        SELECT 
            COUNT(*) as total_posts,
            SUM(likes_count) as total_likes,
            SUM(comments_count) as total_comments,
            AVG(likes_count) as avg_likes_per_post,
            AVG(comments_count) as avg_comments_per_post,
            COUNT(DISTINCT user_id) as unique_posters
        FROM post
        WHERE topic_id = #{topicId}
    </select>

    <!-- 获取话题传播路径分析 -->
    <select id="selectTopicSpreadAnalysis" resultType="java.util.Map">
        WITH RECURSIVE spread_path AS (
            SELECT 
                id,
                user_id,
                parent_id,
                created_at,
                1 as level
            FROM post
            WHERE topic_id = #{topicId} AND parent_id IS NULL
            
            UNION ALL
            
            SELECT 
                p.id,
                p.user_id,
                p.parent_id,
                p.created_at,
                sp.level + 1
            FROM post p
            JOIN spread_path sp ON p.parent_id = sp.id
            WHERE p.topic_id = #{topicId}
        )
        SELECT 
            level,
            COUNT(*) as posts_count,
            COUNT(DISTINCT user_id) as unique_users,
            AVG(TIMESTAMPDIFF(MINUTE, LAG(created_at) OVER (ORDER BY created_at), created_at)) as avg_spread_time
        FROM spread_path
        GROUP BY level
        ORDER BY level
    </select>

    <!-- 获取话题情感分析 -->
    <select id="selectTopicSentimentAnalysis" resultType="java.util.Map">
        SELECT 
            sentiment,
            COUNT(*) as count,
            AVG(likes_count) as avg_likes,
            AVG(comments_count) as avg_comments
        FROM post
        WHERE topic_id = #{topicId}
        GROUP BY sentiment
    </select>

    <!-- 获取话题关键词分析 -->
    <select id="selectTopicKeywordAnalysis" resultType="java.util.Map">
        SELECT 
            keyword,
            COUNT(*) as frequency,
            AVG(p.likes_count) as avg_likes
        FROM post p
        CROSS JOIN JSON_TABLE(
            p.tags,
            '$[*]' COLUMNS (keyword VARCHAR(255) PATH '$')
        ) as keywords
        WHERE p.topic_id = #{topicId}
        GROUP BY keyword
        ORDER BY frequency DESC
    </select>

    <!-- 获取话题用户画像 -->
    <select id="selectTopicUserProfile" resultType="java.util.Map">
        SELECT 
            u.gender,
            u.age_group,
            COUNT(DISTINCT p.id) as post_count,
            AVG(p.likes_count) as avg_likes,
            COUNT(DISTINCT p.user_id) as unique_users
        FROM post p
        JOIN user u ON p.user_id = u.id
        WHERE p.topic_id = #{topicId}
        GROUP BY u.gender, u.age_group
    </select>

    <!-- 获取话题地域分布 -->
    <select id="selectTopicRegionDistribution" resultType="java.util.Map">
        SELECT 
            u.region,
            COUNT(DISTINCT p.id) as post_count,
            COUNT(DISTINCT p.user_id) as user_count,
            AVG(p.likes_count) as avg_likes
        FROM post p
        JOIN user u ON p.user_id = u.id
        WHERE p.topic_id = #{topicId}
        GROUP BY u.region
        ORDER BY post_count DESC
    </select>

    <!-- 获取话题生命周期分析 -->
    <select id="selectTopicLifecycleAnalysis" resultType="java.util.Map">
        SELECT 
            CASE 
                WHEN DATEDIFF(NOW(), MIN(created_at)) &lt;= 7 THEN '新兴期'
                WHEN AVG(likes_count) > (SELECT AVG(likes_count) FROM post) THEN '热门期'
                WHEN COUNT(*) > 100 THEN '稳定期'
                ELSE '衰退期'
            END as lifecycle_stage,
            COUNT(*) as post_count,
            AVG(likes_count) as avg_likes,
            DATEDIFF(MAX(created_at), MIN(created_at)) as duration_days
        FROM post
        WHERE topic_id = #{topicId}
    </select>

    <!-- 批量更新话题热度 -->
    <update id="batchUpdatePopularity">
        UPDATE topics
        SET popularity = (
            SELECT COUNT(*) * 2 + SUM(likes_count) + SUM(comments_count)
            FROM post
            WHERE topic_id = topics.id
            AND created_at >= DATE_SUB(NOW(), INTERVAL 7 DAY)
        )
        WHERE id IN
        <foreach collection="topicIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <!-- 获取话题分类统计 -->
    <select id="selectTopicCategoryStats" resultType="java.util.Map">
        SELECT 
            category,
            COUNT(*) as topic_count,
            SUM(popularity) as total_popularity,
            AVG(popularity) as avg_popularity
        FROM topics
        GROUP BY category
        ORDER BY topic_count DESC
    </select>

    <!-- 获取话题质量分布 -->
    <select id="selectTopicQualityDistribution" resultType="java.util.Map">
        SELECT 
            CASE 
                WHEN quality_score >= 90 THEN '优质'
                WHEN quality_score >= 70 THEN '良好'
                WHEN quality_score >= 50 THEN '一般'
                ELSE '待改进'
            END as quality_level,
            COUNT(*) as topic_count,
            AVG(popularity) as avg_popularity
        FROM topics
        GROUP BY quality_level
        ORDER BY avg_popularity DESC
    </select>

    <!-- 获取话题成长趋势 -->
    <select id="selectTopicGrowthTrend" resultType="java.util.Map">
        SELECT 
            DATE(p.created_at) as date,
            COUNT(*) as post_count,
            COUNT(DISTINCT p.user_id) as user_count,
            SUM(p.likes_count) as total_likes,
            SUM(p.comments_count) as total_comments
        FROM post p
        WHERE p.topic_id = #{topicId}
        AND p.created_at >= #{startTime}
        GROUP BY DATE(p.created_at)
        ORDER BY date
    </select>

    <!-- 获取话题参与用户排行 -->
    <select id="selectTopicUserRanking" resultType="java.util.Map">
        SELECT 
            u.id as user_id,
            u.username,
            COUNT(*) as post_count,
            SUM(p.likes_count) as total_likes,
            AVG(p.likes_count) as avg_likes,
            MAX(p.created_at) as last_post_time
        FROM post p
        JOIN user u ON p.user_id = u.id
        WHERE p.topic_id = #{topicId}
        GROUP BY u.id, u.username
        ORDER BY post_count DESC, total_likes DESC
        LIMIT #{limit}
    </select>

    <!-- 获取话题互动高峰期 -->
    <select id="selectTopicPeakTimes" resultType="java.util.Map">
        SELECT 
            DATE(created_at) as date,
            HOUR(created_at) as hour,
            COUNT(*) as post_count,
            SUM(likes_count) as total_likes,
            SUM(comments_count) as total_comments
        FROM post
        WHERE topic_id = #{topicId}
        AND created_at >= #{startTime}
        GROUP BY DATE(created_at), HOUR(created_at)
        HAVING post_count > (
            SELECT AVG(post_count) * 1.5
            FROM (
                SELECT COUNT(*) as post_count
                FROM post
                WHERE topic_id = #{topicId}
                GROUP BY DATE(created_at), HOUR(created_at)
            ) as avg_posts
        )
        ORDER BY post_count DESC
    </select>

    <!-- 获取话题内容类型分布 -->
    <select id="selectTopicContentTypeDistribution" resultType="java.util.Map">
        SELECT 
            CASE 
                WHEN media_url IS NOT NULL THEN '图文'
                WHEN LENGTH(content) > 500 THEN '长文'
                ELSE '短文'
            END as content_type,
            COUNT(*) as count,
            AVG(likes_count) as avg_likes,
            AVG(comments_count) as avg_comments
        FROM post
        WHERE topic_id = #{topicId}
        GROUP BY content_type
        ORDER BY count DESC
    </select>

    <!-- 获取话题引用分析 -->
    <select id="selectTopicReferenceAnalysis" resultType="java.util.Map">
        SELECT 
            referenced_topic_id,
            t.name as referenced_topic_name,
            COUNT(*) as reference_count,
            COUNT(DISTINCT p.user_id) as unique_users
        FROM post p
        JOIN topics t ON t.id = p.referenced_topic_id
        WHERE p.topic_id = #{topicId}
        GROUP BY referenced_topic_id, t.name
        ORDER BY reference_count DESC
    </select>

    <!-- 获取话题竞品分析 -->
    <select id="selectTopicCompetitionAnalysis" resultType="java.util.Map">
        WITH competing_topics AS (
            SELECT DISTINCT t2.id, t2.name
            FROM topics t1
            JOIN post p1 ON p1.topic_id = t1.id
            JOIN post p2 ON p2.user_id = p1.user_id
            JOIN topics t2 ON p2.topic_id = t2.id
            WHERE t1.id = #{topicId}
            AND t2.id != #{topicId}
        )
        SELECT 
            ct.id,
            ct.name,
            COUNT(DISTINCT p.id) as post_count,
            COUNT(DISTINCT p.user_id) as user_count,
            AVG(p.likes_count) as avg_likes,
            SUM(p.likes_count) as total_likes
        FROM competing_topics ct
        JOIN post p ON p.topic_id = ct.id
        GROUP BY ct.id, ct.name
        ORDER BY post_count DESC
    </select>
</mapper>
